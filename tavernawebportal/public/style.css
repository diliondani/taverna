/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
@keyframes mdc-ripple-fg-radius-in {
  from {
    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }
@keyframes mdc-ripple-fg-opacity-in {
  from {
    animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: 1; } }
@keyframes mdc-ripple-fg-opacity-out {
  from {
    animation-timing-function: linear;
    opacity: 1; }
  to {
    opacity: 0; } }
.mdc-ripple-surface--test-edge-var-bug {
  --mdc-ripple-surface-test-edge-var: 1px solid #000;
  visibility: hidden; }
  .mdc-ripple-surface--test-edge-var-bug::before {
    border: var(--mdc-ripple-surface-test-edge-var); }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-button.mdc-button--raised:not(:disabled) {
  background-color: #FF9800; }
.mdc-button.mdc-button--raised:not(:disabled) {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)); }
.mdc-button.mdc-button--raised::before, .mdc-button.mdc-button--raised::after {
  background-color: rgba(0, 0, 0, 0.32);
  opacity: 0; }
  @supports (background-color: color(green a(10%))) {
    .mdc-button.mdc-button--raised::before, .mdc-button.mdc-button--raised::after {
      background-color: color(var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)) a(32%)); } }
.mdc-button.mdc-button--raised:not(.mdc-ripple-upgraded):hover::before, .mdc-button.mdc-button--raised:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-button--raised:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }
.mdc-button.mdc-button--raised.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }
.mdc-button.mdc-button--raised.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }
.mdc-button.mdc-button--raised.mdc-ripple-upgraded::after {
  opacity: 0; }
.mdc-button.mdc-button--raised.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
.mdc-button.mdc-button--raised.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 83ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

#greeting-form > button {
  margin-top: 8px; }

/* 
 // Using the whole library
@import "material-components-web/material-components-web";
 */

/*# sourceMappingURL=style.css.map */
